
ServerRoot "/usr/local/apache2"

Listen 80
Listen 443
Listen 8991
Listen 8992

LogLevel rewrite:trace8

LoadModule mpm_event_module modules/mod_mpm_event.so
LoadModule authn_file_module modules/mod_authn_file.so
LoadModule authn_core_module modules/mod_authn_core.so
LoadModule authz_host_module modules/mod_authz_host.so
LoadModule authz_groupfile_module modules/mod_authz_groupfile.so
LoadModule authz_user_module modules/mod_authz_user.so
LoadModule authz_core_module modules/mod_authz_core.so
LoadModule access_compat_module modules/mod_access_compat.so
LoadModule auth_basic_module modules/mod_auth_basic.so
LoadModule reqtimeout_module modules/mod_reqtimeout.so
LoadModule filter_module modules/mod_filter.so
LoadModule xml2enc_module modules/mod_xml2enc.so
LoadModule proxy_html_module modules/mod_proxy_html.so
LoadModule mime_module modules/mod_mime.so
LoadModule log_config_module modules/mod_log_config.so
LoadModule env_module modules/mod_env.so
LoadModule headers_module modules/mod_headers.so
LoadModule setenvif_module modules/mod_setenvif.so
LoadModule version_module modules/mod_version.so
LoadModule proxy_module modules/mod_proxy.so
LoadModule proxy_http_module modules/mod_proxy_http.so
LoadModule proxy_wstunnel_module modules/mod_proxy_wstunnel.so
LoadModule unixd_module modules/mod_unixd.so
LoadModule status_module modules/mod_status.so
LoadModule autoindex_module modules/mod_autoindex.so
LoadModule auth_mellon_module modules/mod_auth_mellon.so
#LoadModule dir_module modules/mod_dir.so
LoadModule alias_module modules/mod_alias.so
LoadModule rewrite_module modules/mod_rewrite.so
LoadModule ssl_module modules/mod_ssl.so

<IfModule unixd_module>
User daemon
Group daemon
</IfModule>


# this vhost pivots based on the presence of the 
# X-Auth-Token param or Authorization headers
<VirtualHost *:80>
  LogLevel rewrite:trace8
  ServerName localhost

  <Proxy *>
    Allow from localhost 
  </Proxy>

  #ProxyRemote * http://proxy-mitm:8080
  RewriteEngine On

  # store variable values with dummy rewrite rules
  RewriteRule . - [E=req_scheme:%{REQUEST_SCHEME}]
  RewriteRule . - [E=http_host:%{HTTP_HOST}]
  RewriteRule . - [E=req_uri:%{REQUEST_URI}]
  # set header with variables
  RequestHeader set X-RSC-Request "%{req_scheme}e://%{http_host}e%{req_uri}e"

  <LocationMatch "^/rsconnect">
    AllowOverride None
    Require all granted
    Order Allow,Deny
    Allow from all
  </LocationMatch>

  <LocationMatch "^/secret">
    AllowOverride None
    Require all granted
    Order Allow,Deny
    Allow from all
  </LocationMatch>

  <LocationMatch "^/rstudio">
    AllowOverride None
    Require all granted
    Order Allow,Deny
    Allow from all
  </LocationMatch>

  # conditional auth check
  <If "req('X-Auth-Token') != '' || req('Authorization') =~ /Key .+/">
    # unset auth headers
    RequestHeader unset X-Secret-User-Header

    RewriteRule /rsconnect/(.*) http://localhost:8992/$1 [P,L]
  </If>
  <Else>
    # unset auth headers
    RequestHeader unset X-Secret-User-Header

    SetEnvIf Upgrade ^websocket$ websock=true
    RequestHeader set X-Is-Websocket %{websock}e

    RewriteCond %{HTTP:Upgrade} =websocket
    RewriteRule /(.*) ws://localhost:8991/$1 [P,L]
    RewriteCond %{HTTP:Upgrade} !=websocket
    RewriteRule /(.*) http://localhost:8991/$1 [P,L]
  </Else>
    ProxyPassReverse / http://localhost:8991/
    ProxyPassReverse /rsconnect/ http://localhost:8992/

</VirtualHost> 

<VirtualHost *:443>
  LogLevel rewrite:trace8

  #SSLEngine on
  #SSLProxyEngine on
  #SSLCertificateFile /usr/local/apache2/apache-saml.crt
  #SSLCertificateKeyFile /usr/local/apache2/apache-saml.key

  RewriteEngine On

  # store variable values with dummy rewrite rules
  RewriteRule . - [E=req_scheme:%{REQUEST_SCHEME}]
  RewriteRule . - [E=http_host:%{HTTP_HOST}]
  RewriteRule . - [E=req_uri:%{REQUEST_URI}]
  # set header with variables
  RequestHeader set X-RSC-Request "%{req_scheme}e://%{http_host}e%{req_uri}e"

  RequestHeader set Connection upgrade
  RequestHeader set Upgrade websocket
  ServerName http://localhost
  UseCanonicalName On

  # this turns off certificate checks
  # for backend services
  #SSLProxyCheckPeerCN off
  #SSLProxyCheckPeerName off

  # conditional auth check
  <If "req('X-Auth-Token') != '' || req('Authorization') =~ /Key .+/">
    RewriteRule /rsconnect/(.*) http://localhost:8992/$1 [P,L]

    # unset auth headers
    RequestHeader unset X-Secret-User-Header
  </If>
  <Else>
    RewriteRule /(.*) http://localhost:8991/$1 [P,L]
  </Else>
  ProxyPassReverse / http://localhost:8991/
  ProxyPassReverse /rsconnect/ http://localhost:8992/

</VirtualHost>

# redirect to SAML for auth
<VirtualHost *:8991>
    LogLevel rewrite:trace8

    #Header echo .

    #SSLEngine on
    #SSLProxyEngine on
    #SSLCertificateFile /usr/local/apache2/apache-saml.crt
    #SSLCertificateKeyFile /usr/local/apache2/apache-saml.key
 
    ServerName http://localhost
    UseCanonicalName On
    RewriteEngine On

  <LocationMatch "^/rsconnect/">
    AllowOverride None
    Require all granted
    Order Allow,Deny
    Allow from all
  </LocationMatch>

  <LocationMatch "^/secret/">
    AllowOverride None
    Require all granted
    Order Allow,Deny
    Allow from all
  </LocationMatch>

  <LocationMatch "^/rstudio/">
    AllowOverride None
    Require all granted
    Order Allow,Deny
    Allow from all
  </LocationMatch>

    Include /usr/local/apache2/conf/mellon.conf
    RequestHeader set X-Secret-User-Header "%{MELLON_USER}e"


    # protect the location that mod_auth_mellon needs to function
    ProxyPass /secret/ !

     RewriteRule . - [E=req_scheme:%{REQUEST_SCHEME}]
     RewriteRule . - [E=http_host:%{HTTP_HOST}]
     RewriteRule . - [E=req_uri:%{REQUEST_URI}]
     RequestHeader set Record-Request "%{req_scheme}e://%{http_host}e%{req_uri}e"

    SetEnvIf X-Is-Websocket ^true$ websock=true
    RequestHeader unset X-Is-Websocket

    # proxy rstudio traffic to RStudio
    RewriteCond %{ENV:websock} =true
    RewriteRule /rstudio/(.*) ws://proxy-rsp:8787/$1 [P,L]
    RewriteCond %{ENV:websock} !=true
    RewriteRule /rstudio/(.*) http://proxy-rsp:8787/$1 [P,L]
    RedirectMatch ^/rstudio$ /rstudio/ 


    # proxy rsconnect traffic to Connect
    RewriteCond %{ENV:websock} =true
    RewriteRule /rsconnect/(.*) ws://proxy-connect:3939/$1 [P,L]
    RewriteCond %{ENV:websock} !=true
    RewriteRule /rsconnect/(.*) http://proxy-connect:3939/$1 [P,L]
    RedirectMatch ^/rsconnect$ /rsconnect/ 

    

    #ProxyRemote * http://proxy-mitm:8080

    # proxy debug traffic to debug
    #RewriteCond %{REQUEST_URI} ^/debug/
    #RewriteCond %{HTTP:Upgrade} =websocket
    #RewriteRule /debug/(.*) ws://proxy-debug:8080/$1 [P,L]
    #RewriteCond %{REQUEST_URI} ^/debug/
    #RewriteCond %{HTTP:Upgrade} !=websocket
    #RewriteRule /debug/(.*) http://proxy-debug:8080/$1 [P,L]

    #ProxyPreserveHost On
    #ProxyPass /rstudio/ http://proxy-rsp:8787/
    #SetEnv proxy-nokeepalive 1
    #ProxyPassReverse /rstudio/ http://proxy-rsp:8787/
    <Location "/rstudio/">
      ProxyPass http://proxy-rsp:8787/
      ProxyPassReverse http://proxy-rsp:8787/
    </Location>

    <Location "/rsconnect/">
      ProxyPass http://proxy-connect:3939/
      ProxyPassReverse /
    </Location>

   # <Location "/debug/">
   #   RequestHeader set Upgrade "websocket"
   #   ProxyPass http://proxy-debug:8080/
   #   ProxyPassReverse http://proxy-debug:8080/
   # </Location>
    ProxyRequests Off
</VirtualHost>

# no auth necessary - Connect will validate the token / API key
# make sure to unset the secret user header
<VirtualHost *:8992>
    LogLevel rewrite:trace8

    #SSLEngine on
    #SSLProxyEngine on
    #SSLCertificateFile /usr/local/apache2/apache-saml.crt
    #SSLCertificateKeyFile /usr/local/apache2/apache-saml.key

    ProxyPass / http://proxy-connect:3939/
    ProxyPassReverse / http://proxy-connect:3939/
    ProxyRequests Off

</VirtualHost>


ServerAdmin you@example.com


ErrorLog /proc/self/fd/2

DocumentRoot "/"

<Directory />
AllowOverride None
Order Deny,Allow
Deny from all
Require all denied
</Directory>

<IfModule log_config_module>
    LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
    LogFormat "%h %l %u %t \"%r\" %>s %b" common

    <IfModule logio_module>
      LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\" %I %O" combinedio
    </IfModule>

    CustomLog /proc/self/fd/1 common

</IfModule>

<IfModule headers_module>
    RequestHeader unset Proxy early
</IfModule>

<IfModule mime_module>
    TypesConfig conf/mime.types

    AddType application/x-compress .Z
    AddType application/x-gzip .gz .tgz
</IfModule>

<IfModule ssl_module>
SSLRandomSeed startup builtin
SSLRandomSeed connect builtin
</IfModule>
